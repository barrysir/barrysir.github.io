{"version":3,"file":"389.78482.js","mappings":"6XAqBO,SAASA,EAAaC,GAAoB,IAAnB,OAAEC,GAAeD,EAC7C,MAAM,EAAEE,IAAMC,EAAAA,EAAAA,KACRC,GAAUC,EAAAA,EAAAA,QAAeC,EAAAA,GAAMC,KAAO,aAAUC,EAChDC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAcC,IAAC,IAAAC,EAAA,OAAe,QAAfA,EAAKD,EAAEE,gBAAQ,IAAAD,OAAA,EAAVA,EAAYE,KAAKC,YAAY,KAC3DC,EAAaC,EAAQC,EAAaC,IAAUC,EAAAA,EAAAA,UAAQ,KACzD,MAAMC,EAA0D,CAAC,EACjE,IAAIC,EAAS,EACb,MAAMC,EAAY,IAAIC,EAAAA,GACtB,IAAK,MAAMC,KAAS1B,EACbsB,EAAmBI,EAAMC,YAC5BL,EAAmBI,EAAMC,UAAY,IAAIF,EAAAA,IAE3CH,EAAmBI,EAAMC,UAAUC,IAAIF,EAAMG,OAC7CN,EAASO,KAAKC,IAAIR,EAAQC,EAAUI,IAAIF,EAAMG,QAEhD,MAAMG,EAAgBC,MAAMC,KAAKV,EAAUW,UAAUC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAClEtB,GAAgBN,GAAY,IAC/B6B,QAAQC,KAAQlB,GAAmBmB,EAAAA,EAAAA,IAAaxC,EAAGuC,EAAEE,QACrDC,UAUH,MAAO,CATa3B,EAAa4B,KAAKC,IAAI,CACxCC,MAAOD,EAAKC,MACZJ,IAAKG,EAAKH,IACVK,OAAOC,EAAAA,EAAAA,IAAc/C,EAAG4C,EAAKH,KAC7BO,KAAMjB,EAAcY,KAAKM,IAAG,CAC1BrB,OAAOsB,EAAAA,EAAAA,IAAYD,GACnBE,MAAO9B,GAAmBmB,EAAAA,EAAAA,IAAaxC,EAAG4C,EAAKH,MAAMW,IAAIH,IAAQ,UAKnElC,EAAa4B,KAAKJ,GAAMA,EAAEM,QAC1Bb,MAAMC,KAAKV,EAAUW,UAClBC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACnBM,KAAKf,IAAUsB,EAAAA,EAAAA,IAAYtB,KAC9BI,MAAMC,KAAKV,EAAU8B,mBAClBlB,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAKC,EAAE,KACxBM,KAAIW,IAAA,IAAE,CAAEH,GAAMG,EAAA,OAAKH,CAAK,IAC5B,GACA,CAAC1C,EAAUV,EAAQC,IAEtB,OACEuD,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CACXC,cAAe,CAAEC,EAAqB,IAAlBvC,EAAOwC,OAAe,IAAM,IAChDC,MAAO,CACLC,OAAQ,CAAEC,OAAQvD,EAAW,QAAU,QAASwD,YAAa,SAE/DC,MAAOzD,EAAW,IAAM,IAAI0D,SAAA,EAE5BC,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CACXC,WAAYnD,EACZoD,OAAQlD,EACRmD,gBAAgBJ,EAAAA,EAAAA,KAACK,EAAAA,EAAY,IAAIN,SAEhCjD,EAAY2B,KAAK6B,IAChBN,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAETzB,KAAMwB,EAAQxB,KACdqB,OAAQG,EAAQxB,KAAKL,KAClBJ,GAAC,GAAAmC,OAAQnC,EAAEY,MAAK,KAAAuB,OAAIF,EAAQ1B,MAAK,aAEpCc,MAAO,CACLS,OAAQ,CAAEM,KAAMzE,IAElBwD,EAAE,QACFkB,EAAE,QACFN,gBAAgBJ,EAAAA,EAAAA,KAACW,EAAAA,EAAc,KAV1BL,EAAQ/B,UAcnByB,EAAAA,EAAAA,KAACY,EAAAA,EAAW,CACVC,WAAY7D,EACZ4B,MAAM,cACNc,MAAO,CACLoB,KAAM,CAAEC,OAAQ/E,GAChBgF,WAAY,CAAEP,KAAMzE,GACpBiF,UAAW,CAAER,KAAMzE,QAK7B,C,gECpGO,MAAMkF,GAAiBC,EAAAA,EAAAA,KAAK,GACtBC,GAAoBD,EAAAA,EAAAA,IAAK,GACzBE,GAAmBF,EAAAA,EAAAA,SAAyB/E,GAE5CkF,EAAY,IACZC,EAAmBD,EAAY,I,cCcrC,SAASE,EAAQC,GACtB,OAAOA,EAAMC,KAAKC,WAAW,mBAC/B,CA8BA,SAASC,IACP,OAAO,IAAIC,SAASC,IAClBC,oBAAoBD,EAAQ,GAEhC,CAEO,SAASE,IACd,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,IAAQjB,IACnCkB,EAAUC,IAAeF,EAAAA,EAAAA,IAAQf,IACjCkB,EAASC,IAAcJ,EAAAA,EAAAA,IAAQd,GAmBhCmB,EAAgC,iBAAZF,EAE1B,OACEjD,EAAAA,EAAAA,MAAAoD,EAAAA,SAAA,CAAA1C,SAAA,EACIkC,IACA5C,EAAAA,EAAAA,MAACqD,EAAAA,EAAM,CACLC,QAvBRC,iBACEV,GAAa,GACbG,EAAY,GACZE,OAAWnG,SACLwF,IACN,MAAMiB,EA7BH,YACL,IAAIC,EAAa,EACjB,IAAK,MAAOC,EAAKC,KAjBnB,YAEE,MAAMrG,EAAWH,EAAAA,EAAayG,WAAWtG,SACnCuG,EAAcC,EAAAA,EAAeF,WAEnC,IAAK,IAAID,EAAM,EAAGA,EAAM1B,EAAW0B,SAC3B,EAACI,EAAAA,EAAAA,IAAKzG,EAAUuG,GAAcF,EAExC,CAS2BK,GACnBN,EAAIlH,OAAOyH,KAAK9B,IAClBsB,IAEEE,EAAMzB,GAAqB,UACvByB,EAAM1B,GAGhB,OAAOwB,EAAaxB,CACtB,CAkBmBiC,GACf,IAAIC,EAASX,EAAOY,OACpB,MAAQD,EAAOE,MACbrB,EAAYmB,EAAOG,aACb/B,IACN4B,EAASX,EAAOY,OAElBvB,GAAa,GACbG,EAAY,KACZE,EAAWiB,EAAOG,MACpB,EASQC,OAAO,SACPC,KAAMrB,EAAa,SAAW,eAAezC,SAAA,CAE5CyC,EAAa,YAAc,UAAU,qBAGzCP,IACC5C,EAAAA,EAAAA,MAAA,KAAAU,SAAA,CAAG,6BAC0B,KAC3BC,EAAAA,EAAAA,KAAC8D,EAAAA,EAAW,CAACH,MAAOvB,EAAUwB,OAAO,cAGxCpB,IACCnD,EAAAA,EAAAA,MAAC0E,EAAAA,EAAO,CAACF,KAAK,OAAM9D,SAAA,CAAC,6BACkB,IAAVuC,GAAe0B,QAAQ,GAAG,SAK/D,CAEO,SAASC,EAAWC,GACzB,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,GACrC,OACEhF,EAAAA,EAAAA,MAAAoD,EAAAA,SAAA,CAAA1C,SAAA,EACEC,EAAAA,EAAAA,KAACsE,EAAAA,EAAM,CACLH,OAAQA,EACRI,QAASA,IAAMH,GAAU,GACzBI,MAAM,kCACNX,KAAK,eAAc9D,UAEnBC,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CAAA1E,UACTC,EAAAA,EAAAA,KAACgC,EAAe,SAGpBhC,EAAAA,EAAAA,KAAC0E,EAAAA,EAAQ,IAAKR,EAAOvB,QAASA,IAAMyB,GAAU,OAGpD,CC5Ge,SAASO,IACtB,MAAMhI,GAAWH,EAAAA,EAAAA,IAAcC,GAAMA,EAAEE,YAChCiI,IAAcC,EAAAA,EAAAA,mBAAiB1C,EAAAA,EAAAA,IAAQ2C,EAAAA,IACxC5B,GAAc2B,EAAAA,EAAAA,mBAAiB1B,EAAAA,EAAAA,MAC/B9G,GAAWC,EAAAA,EAAAA,MACXyI,EAAmC,QAAfH,EAEpB/I,GAASqB,EAAAA,EAAAA,UACb,IAAOP,EAAWmB,MAAMC,MAAKiH,EAAAA,EAAAA,IAAe9B,EAAavG,IAAa,IACtE,CAACA,EAAUuG,KAEN+B,EAAOC,IAAkBhI,EAAAA,EAAAA,UAAQ,KACtC,MAAM+H,EAAQ,IAAIE,IACZC,EAAWvJ,EAAOuC,QAAQb,IAC9B0H,EAAMxH,IAlBZ,SAA0BF,GACxB,MAAO,GAAPiD,OAAUjD,EAAMmE,KAAI,KAAAlB,OAAIjD,EAAM8H,OAChC,CAgBgBC,CAAiB/H,KACvBwH,IAAqBxH,EAAMgI,MAAMC,OAAOC,GAAMA,IAAMb,OAK1D,MAAO,CAACK,EAAOG,EAAS,GACvB,CAACvJ,EAAQkJ,EAAmBH,IAE/B,OAAKjI,GAKH0C,EAAAA,EAAAA,MAAAoD,EAAAA,SAAA,CAAA1C,SAAA,EACEV,EAAAA,EAAAA,MAACqG,EAAAA,EAAM,CACLhG,MAAO,CACLiG,SAAU,SACVC,IAAK,QACL7F,SAAA,EAEFV,EAAAA,EAAAA,MAACwG,EAAAA,EAAW,CAAA9F,SAAA,CACTlE,EAAO4D,OAAO,yBAAuBwF,EAAMa,KAAK,aAAW,IAC3DnJ,EAASsI,MAAMxF,OAAO,aAExByD,EAAYqC,MAAMO,KAAO,IAAMzJ,IAC9BgD,EAAAA,EAAAA,MAACwG,EAAAA,EAAW,CAAA9F,SAAA,EACVC,EAAAA,EAAAA,KAAC+F,EAAAA,EAAa,KACd/F,EAAAA,EAAAA,KAACgG,EAAAA,EAAwB,WAI/BhG,EAAAA,EAAAA,KAACrE,EAAa,CAACE,OAAQqJ,KACvBlF,EAAAA,EAAAA,KAAA,OAAKiG,UAAWC,EAAAA,EAAOC,UAAUpG,SAC9BmF,EAAezG,KAAI,CAAClB,EAAOyF,IAC1BxB,EAAQjE,IACNyC,EAAAA,EAAAA,KAACiE,EAAU,CAAC1G,MAAOA,GAAYyF,IAE/BhD,EAAAA,EAAAA,KAAC0E,EAAAA,EAAQ,CAACnH,MAAOA,GAAYyF,WA5B9BhD,EAAAA,EAAAA,KAACoG,EAAAA,EAAO,GAkCnB,C","sources":["webpack://ddr-card-draw/./src/eligible-charts/histogram.tsx","webpack://ddr-card-draw/./src/controls/degrs-state.ts","webpack://ddr-card-draw/./src/controls/degrs-tester.tsx","webpack://ddr-card-draw/./src/eligible-charts/index.tsx"],"sourcesContent":["import { EligibleChart } from '../models/Drawing';\nimport {\n  VictoryChart,\n  VictoryBar,\n  VictoryStack,\n  VictoryAxis,\n  VictoryTooltip,\n  VictoryLabel,\n} from 'victory';\nimport { useMemo } from 'react';\nimport { CountingSet } from '../utils';\nimport { useDrawState } from '../draw-state';\nimport { useIntl } from '../hooks/useIntl';\nimport { getDiffClass, getMetaString, formatLevel } from '../game-data-utils';\nimport { Theme, useTheme } from '../theme-toggle';\nimport { useIsNarrow } from '../hooks/useMediaQuery';\n\ninterface Props {\n  charts: EligibleChart[];\n}\n\nexport function DiffHistogram({ charts }: Props) {\n  const { t } = useIntl();\n  const fgColor = useTheme() === Theme.Dark ? 'white' : undefined;\n  const isNarrow = useIsNarrow();\n  const allDiffs = useDrawState((s) => s.gameData?.meta.difficulties);\n  const [dataPerDiff, colors, xAxisLabels, totals] = useMemo(() => {\n    const countByClassAndLvl: Record<string, CountingSet<number>> = {};\n    let maxBar = 0;\n    const allLevels = new CountingSet<number>();\n    for (const chart of charts) {\n      if (!countByClassAndLvl[chart.diffAbbr]) {\n        countByClassAndLvl[chart.diffAbbr] = new CountingSet();\n      }\n      countByClassAndLvl[chart.diffAbbr].add(chart.level);\n      maxBar = Math.max(maxBar, allLevels.add(chart.level));\n    }\n    const orderedLevels = Array.from(allLevels.values()).sort((a, b) => a - b);\n    const difficulties = (allDiffs || [])\n      .filter((d) => !!countByClassAndLvl[getDiffClass(t, d.key)])\n      .reverse();\n    const dataPerDiff = difficulties.map((diff) => ({\n      color: diff.color,\n      key: diff.key,\n      label: getMetaString(t, diff.key),\n      data: orderedLevels.map((lvl) => ({\n        level: formatLevel(lvl),\n        count: countByClassAndLvl[getDiffClass(t, diff.key)].get(lvl) || 0,\n      })),\n    }));\n    return [\n      dataPerDiff,\n      difficulties.map((d) => d.color),\n      Array.from(allLevels.values())\n        .sort((a, b) => a - b)\n        .map((level) => formatLevel(level)),\n      Array.from(allLevels.valuesWithCount())\n        .sort((a, b) => a[0] - b[0])\n        .map(([, count]) => count),\n    ];\n  }, [allDiffs, charts, t]);\n\n  return (\n    <VictoryChart\n      domainPadding={{ x: totals.length === 2 ? 250 : 50 }}\n      style={{\n        parent: { height: isNarrow ? '200px' : '300px', touchAction: 'auto' },\n      }}\n      width={isNarrow ? 600 : 800}\n    >\n      <VictoryStack\n        colorScale={colors}\n        labels={totals}\n        labelComponent={<VictoryLabel />}\n      >\n        {dataPerDiff.map((dataSet) => (\n          <VictoryBar\n            key={dataSet.key}\n            data={dataSet.data}\n            labels={dataSet.data.map(\n              (d) => `${d.count} ${dataSet.label} charts`,\n            )}\n            style={{\n              labels: { fill: fgColor },\n            }}\n            x=\"level\"\n            y=\"count\"\n            labelComponent={<VictoryTooltip />}\n          />\n        ))}\n      </VictoryStack>\n      <VictoryAxis\n        tickValues={xAxisLabels}\n        label=\"Chart Level\"\n        style={{\n          axis: { stroke: fgColor },\n          tickLabels: { fill: fgColor },\n          axisLabel: { fill: fgColor },\n        }}\n      />\n    </VictoryChart>\n  );\n}\n","import { atom } from 'jotai';\n\nexport const degrsIsTesting = atom(false);\nexport const degrsTestProgress = atom(0);\nexport const degrsTestResults = atom<number | undefined>(undefined);\n\nexport const TEST_SIZE = 10_000;\nexport const REPORT_FREQUENCY = TEST_SIZE / 100;\n","import {\n  Button,\n  Callout,\n  Dialog,\n  DialogBody,\n  ProgressBar,\n} from '@blueprintjs/core';\nimport { draw } from '../card-draw';\nimport { useDrawState } from '../draw-state';\nimport { useAtom } from 'jotai';\nimport { useConfigState } from '../config-state';\nimport {\n  TEST_SIZE,\n  REPORT_FREQUENCY,\n  degrsIsTesting,\n  degrsTestProgress,\n  degrsTestResults,\n} from './degrs-state';\nimport { SongCard, SongCardProps } from '../song-card/song-card';\nimport { useState } from 'react';\n\nexport function isDegrs(thing: { name: string; artist: string }) {\n  return thing.name.startsWith('DEAD END(\"GROOVE');\n}\n\nfunction* oneMillionDraws() {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const gameData = useDrawState.getState().gameData!;\n  const configState = useConfigState.getState();\n\n  for (let idx = 0; idx < TEST_SIZE; idx++) {\n    yield [draw(gameData, configState), idx] as const;\n  }\n}\n\n/**\n * Returns percentage of 100k draws that contained degrs\n * yields current progress every 1000 loops to allow passing back\n * the event loop\n **/\nexport function* degrsTester() {\n  let totalDegrs = 0;\n  for (const [set, idx] of oneMillionDraws()) {\n    if (set.charts.some(isDegrs)) {\n      totalDegrs++;\n    }\n    if (idx % REPORT_FREQUENCY === 0) {\n      yield idx / TEST_SIZE;\n    }\n  }\n  return totalDegrs / TEST_SIZE;\n}\n\nfunction nextIdleCycle() {\n  return new Promise((resolve) => {\n    requestIdleCallback(resolve);\n  });\n}\n\nexport function DegrsTestButton() {\n  const [isTesting, setIsTesting] = useAtom(degrsIsTesting);\n  const [progress, setProgress] = useAtom(degrsTestProgress);\n  const [results, setResults] = useAtom(degrsTestResults);\n\n  async function startTest() {\n    setIsTesting(true);\n    setProgress(0);\n    setResults(undefined);\n    await nextIdleCycle();\n    const tester = degrsTester();\n    let report = tester.next();\n    while (!report.done) {\n      setProgress(report.value);\n      await nextIdleCycle();\n      report = tester.next();\n    }\n    setIsTesting(false);\n    setProgress(100);\n    setResults(report.value);\n  }\n\n  const hasResults = typeof results === 'number';\n\n  return (\n    <>\n      {!isTesting && (\n        <Button\n          onClick={startTest}\n          intent=\"danger\"\n          icon={hasResults ? 'repeat' : 'warning-sign'}\n        >\n          {hasResults ? 'Recompute' : 'Compute'} DEGRS Forecast\n        </Button>\n      )}\n      {isTesting && (\n        <p>\n          Calculating DEGRS ratio...{' '}\n          <ProgressBar value={progress} intent=\"danger\" />\n        </p>\n      )}\n      {hasResults && (\n        <Callout icon=\"rain\">\n          Today's risk of DEGRS is {(results * 100).toFixed(1)}%\n        </Callout>\n      )}\n    </>\n  );\n}\n\nexport function TesterCard(props: SongCardProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <>\n      <Dialog\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        title=\"DEGRS Emergency Response System\"\n        icon=\"warning-sign\"\n      >\n        <DialogBody>\n          <DegrsTestButton />\n        </DialogBody>\n      </Dialog>\n      <SongCard {...props} onClick={() => setIsOpen(true)} />\n    </>\n  );\n}\n","import { eligibleCharts } from '../card-draw';\nimport { useConfigState } from '../config-state';\nimport { useDrawState } from '../draw-state';\nimport { SongCard } from '../song-card';\nimport styles from '../drawing-list.css';\nimport { EligibleChart } from '../models/Drawing';\nimport { Navbar, NavbarGroup, NavbarDivider, Spinner } from '@blueprintjs/core';\nimport { useIsNarrow } from '../hooks/useMediaQuery';\nimport { useAtom } from 'jotai';\nimport { useDeferredValue, useMemo } from 'react';\nimport { currentTabAtom, EligibleChartsListFilter } from './filter';\nimport { DiffHistogram } from './histogram';\nimport { isDegrs, TesterCard } from '../controls/degrs-tester';\n\nfunction songKeyFromChart(chart: EligibleChart) {\n  return `${chart.name}:${chart.artist}`;\n}\n\nexport default function EligibleChartsList() {\n  const gameData = useDrawState((s) => s.gameData);\n  const [currentTab] = useDeferredValue(useAtom(currentTabAtom));\n  const configState = useDeferredValue(useConfigState());\n  const isNarrow = useIsNarrow();\n  const isDisplayFiltered = currentTab !== 'all';\n\n  const charts = useMemo(\n    () => (gameData ? Array.from(eligibleCharts(configState, gameData)) : []),\n    [gameData, configState],\n  );\n  const [songs, filteredCharts] = useMemo(() => {\n    const songs = new Set<string>();\n    const filtered = charts.filter((chart) => {\n      songs.add(songKeyFromChart(chart));\n      if (isDisplayFiltered && chart.flags.every((f) => f !== currentTab)) {\n        return false;\n      }\n      return true;\n    });\n    return [songs, filtered];\n  }, [charts, isDisplayFiltered, currentTab]);\n\n  if (!gameData) {\n    return <Spinner />;\n  }\n\n  return (\n    <>\n      <Navbar\n        style={{\n          position: 'sticky',\n          top: '50px',\n        }}\n      >\n        <NavbarGroup>\n          {charts.length} eligible charts from {songs.size} songs (of{' '}\n          {gameData.songs.length} total)\n        </NavbarGroup>\n        {configState.flags.size > 0 && !isNarrow && (\n          <NavbarGroup>\n            <NavbarDivider />\n            <EligibleChartsListFilter />\n          </NavbarGroup>\n        )}\n      </Navbar>\n      <DiffHistogram charts={filteredCharts} />\n      <div className={styles.chartList}>\n        {filteredCharts.map((chart, idx) =>\n          isDegrs(chart) ? (\n            <TesterCard chart={chart} key={idx} />\n          ) : (\n            <SongCard chart={chart} key={idx} />\n          ),\n        )}\n      </div>\n    </>\n  );\n}\n"],"names":["DiffHistogram","_ref","charts","t","useIntl","fgColor","useTheme","Theme","Dark","undefined","isNarrow","useIsNarrow","allDiffs","useDrawState","s","_s$gameData","gameData","meta","difficulties","dataPerDiff","colors","xAxisLabels","totals","useMemo","countByClassAndLvl","maxBar","allLevels","CountingSet","chart","diffAbbr","add","level","Math","max","orderedLevels","Array","from","values","sort","a","b","filter","d","getDiffClass","key","reverse","map","diff","color","label","getMetaString","data","lvl","formatLevel","count","get","valuesWithCount","_ref2","_jsxs","VictoryChart","domainPadding","x","length","style","parent","height","touchAction","width","children","_jsx","VictoryStack","colorScale","labels","labelComponent","VictoryLabel","dataSet","VictoryBar","concat","fill","y","VictoryTooltip","VictoryAxis","tickValues","axis","stroke","tickLabels","axisLabel","degrsIsTesting","atom","degrsTestProgress","degrsTestResults","TEST_SIZE","REPORT_FREQUENCY","isDegrs","thing","name","startsWith","nextIdleCycle","Promise","resolve","requestIdleCallback","DegrsTestButton","isTesting","setIsTesting","useAtom","progress","setProgress","results","setResults","hasResults","_Fragment","Button","onClick","async","tester","totalDegrs","set","idx","getState","configState","useConfigState","draw","oneMillionDraws","some","degrsTester","report","next","done","value","intent","icon","ProgressBar","Callout","toFixed","TesterCard","props","isOpen","setIsOpen","useState","Dialog","onClose","title","DialogBody","SongCard","EligibleChartsList","currentTab","useDeferredValue","currentTabAtom","isDisplayFiltered","eligibleCharts","songs","filteredCharts","Set","filtered","artist","songKeyFromChart","flags","every","f","Navbar","position","top","NavbarGroup","size","NavbarDivider","EligibleChartsListFilter","className","styles","chartList","Spinner"],"sourceRoot":""}