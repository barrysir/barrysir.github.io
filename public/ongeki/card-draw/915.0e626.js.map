{"version":3,"file":"915.0e626.js","mappings":"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","sources":["webpack://ddr-card-draw/./src/drawn-set.css?47da","webpack://ddr-card-draw/./src/tournament-mode/drawing-labels.css?e699","webpack://ddr-card-draw/./src/tournament-mode/round-label.tsx","webpack://ddr-card-draw/./src/tournament-mode/round-select.tsx","webpack://ddr-card-draw/./src/tournament-mode/drawing-labels.tsx","webpack://ddr-card-draw/./src/tournament-mode/drawing-actions.tsx","webpack://ddr-card-draw/./src/tournament-mode/drawing-actions.css?0531","webpack://ddr-card-draw/./src/tournament-mode/sync-with-peers.ts","webpack://ddr-card-draw/./src/drawn-set.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chartList\":\"chartList__HNAHU\",\"drawing\":\"drawing__JVp34\"};","// extracted by mini-css-extract-plugin\nexport default {\"headers\":\"headers__bpI_X\",\"title\":\"title__RAHea\",\"versus\":\"versus__qtjCJ\",\"players\":\"players__eSXWM\"};","import { MenuItem } from '@blueprintjs/core';\nimport { ItemPredicate, ItemRenderer } from '@blueprintjs/select';\nimport { ReactNode } from 'react';\nimport FuzzySearch from 'fuzzy-search';\nimport { BlueprintIcons_16Id } from '@blueprintjs/icons/lib/esm/generated/16px/blueprint-icons-16';\n\nexport const renderRoundLabel: ItemRenderer<string> = (\n  roundLabel,\n  { handleClick, modifiers, query, handleFocus },\n) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n  let icon: BlueprintIcons_16Id | null = null;\n  let text = roundLabel;\n  if (roundLabel === '') {\n    icon = 'delete';\n    text = 'No label';\n  }\n  return (\n    <MenuItem\n      icon={icon}\n      active={modifiers.active}\n      disabled={modifiers.disabled}\n      style={{ opacity: roundLabel ? undefined : 0.5 }}\n      key={roundLabel}\n      onClick={handleClick}\n      onFocus={handleFocus}\n      text={highlightText(text, query)}\n      roleStructure=\"listoption\"\n    />\n  );\n};\n\nexport const filterRoundLabel: ItemPredicate<string> = (query, roundLabel) => {\n  if (!query) {\n    return true;\n  }\n  return !!FuzzySearch.isMatch(roundLabel, query, false);\n};\n\nfunction highlightText(text: string, query: string) {\n  let lastIndex = 0;\n  const words = query\n    .split(/\\s+/)\n    .filter((word) => word.length > 0)\n    .map(escapeRegExpChars);\n  if (words.length === 0) {\n    return [text];\n  }\n  const regexp = new RegExp(words.join('|'), 'gi');\n  const tokens: ReactNode[] = [];\n  while (true) {\n    const match = regexp.exec(text);\n    if (!match) {\n      break;\n    }\n    const length = match[0].length;\n    const before = text.slice(lastIndex, regexp.lastIndex - length);\n    if (before.length > 0) {\n      tokens.push(before);\n    }\n    lastIndex = regexp.lastIndex;\n    tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n  }\n  const rest = text.slice(lastIndex);\n  if (rest.length > 0) {\n    tokens.push(rest);\n  }\n  return tokens;\n}\n\nfunction escapeRegExpChars(text: string) {\n  return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\n}\n","import { Classes, MenuItem } from '@blueprintjs/core';\nimport { Suggest } from '@blueprintjs/select';\n\nimport { filterRoundLabel, renderRoundLabel } from './round-label';\nimport { useDrawing } from '../drawing-context';\nimport { useIntl } from '../hooks/useIntl';\nimport { useMemo } from 'react';\nimport { useConfigState } from '../config-state';\n\nfunction identity<T>(i: T) {\n  return i;\n}\n\nexport function RoundSelect() {\n  const { t } = useIntl();\n  const updateDrawing = useDrawing((d) => d.updateDrawing);\n  const tournamentTitle = useDrawing((d) => d.title);\n  const roundLabels = useConfigState((c) => c.tournamentRounds);\n  return (\n    <AutoCompleteSelect\n      size=\"medium\"\n      placeholder={t('tournamentRoundPlaceholder')}\n      itemList={roundLabels}\n      value={tournamentTitle || null}\n      onSelect={(title) => updateDrawing({ title })}\n    />\n  );\n}\n\ninterface Props {\n  /** remove empty autocomplete item */\n  noEmpty?: boolean;\n  size: 'medium' | 'large';\n  itemList: Array<string>;\n  placeholder: string;\n  value: string | null;\n  onSelect(item: string): void;\n}\n\nexport function AutoCompleteSelect(props: Props) {\n  const { t } = useIntl();\n\n  const items = useMemo(() => {\n    const list = props.itemList.slice();\n    if (!props.noEmpty) {\n      list.unshift('');\n    }\n\n    return list;\n  }, [props.itemList, props.noEmpty]);\n\n  return (\n    <Suggest<string>\n      inputProps={{\n        style: {\n          boxShadow: 'none',\n          textAlign: 'center',\n          background: 'transparent',\n          height: '36px',\n          lineHeight: '36px',\n          fontSize: props.size === 'medium' ? '26px' : '32px',\n        },\n        placeholder: props.placeholder,\n      }}\n      className={Classes.EDITABLE_TEXT}\n      items={items}\n      resetOnSelect\n      resetOnClose\n      createNewItemPosition=\"first\"\n      createNewItemFromQuery={identity}\n      inputValueRenderer={identity}\n      createNewItemRenderer={(query, active, handleClick) => (\n        <MenuItem\n          active={active}\n          key={query}\n          onClick={handleClick}\n          text={t('tournamentRoundAdd', { round: query })}\n          icon=\"add\"\n          roleStructure=\"listoption\"\n        />\n      )}\n      itemPredicate={filterRoundLabel}\n      itemRenderer={renderRoundLabel}\n      noResults={\n        <MenuItem\n          disabled={true}\n          text={t('noResults')}\n          roleStructure=\"listoption\"\n        />\n      }\n      onItemSelect={props.onSelect}\n      selectedItem={props.value || null}\n    />\n  );\n}\n","import { useCallback } from 'react';\nimport { useConfigState } from '../config-state';\nimport { useDrawing } from '../drawing-context';\nimport styles from './drawing-labels.css';\nimport { AutoCompleteSelect, RoundSelect } from './round-select';\nimport { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\n\nexport function SetLabels() {\n  const showLabels = useConfigState((s) => s.showPlayerAndRoundLabels);\n  const players = useDrawing((s) => s.players);\n  if (!showLabels) {\n    return null;\n  }\n\n  return (\n    <div className={styles.headers}>\n      <div className={styles.title}>\n        <RoundSelect />\n      </div>\n      <div className={styles.players}>\n        {players.map((p, idx) => (\n          <PlayerLabel\n            key={idx}\n            placeholder={`Player ${idx + 1}`}\n            playerIndex={idx + 1}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction Versus() {\n  const players = useDrawing((s) => s.players);\n  const ipp = useDrawing((s) => s.incrementPriorityPlayer);\n  const priorityPlayer = useDrawing((s) => s.priorityPlayer);\n  if (players.length !== 2) {\n    return null;\n  }\n  return (\n    <div className={styles.versus} onClick={ipp}>\n      <Icon\n        icon={IconNames.CaretLeft}\n        style={{\n          visibility: priorityPlayer === 1 ? 'visible' : 'hidden',\n          verticalAlign: 'middle',\n        }}\n      />\n      {' vs '}\n      <Icon\n        icon={IconNames.CaretRight}\n        style={{\n          visibility: priorityPlayer === 2 ? 'visible' : 'hidden',\n          verticalAlign: 'middle',\n        }}\n      />\n    </div>\n  );\n}\n\nfunction PlayerLabel({\n  playerIndex,\n  placeholder,\n}: {\n  playerIndex: number;\n  placeholder: string;\n}) {\n  const updateDrawing = useDrawing((s) => s.updateDrawing);\n  const value = useDrawing((s) => s.players[playerIndex - 1] || null);\n  const playerNames = useConfigState((s) => s.playerNames);\n  const updateConfig = useConfigState((s) => s.update);\n  const handleChange = useCallback(\n    (value: string) => {\n      updateDrawing((drawing) => {\n        const prev = drawing.players.slice();\n        prev[playerIndex - 1] = value;\n        return { players: prev };\n      });\n      if (!playerNames.includes(value)) {\n        updateConfig((prev) => {\n          const nextNames = prev.playerNames.slice();\n          nextNames.push(value);\n          return { playerNames: nextNames };\n        });\n      }\n    },\n    [updateDrawing, playerIndex, playerNames, updateConfig],\n  );\n  const ret = (\n    <AutoCompleteSelect\n      value={value}\n      itemList={playerNames}\n      placeholder={placeholder}\n      onSelect={handleChange}\n      size=\"large\"\n    />\n  );\n  if (playerIndex === 1) {\n    return (\n      <>\n        {ret}\n        <Versus />\n      </>\n    );\n  }\n  return ret;\n}\n","import {\n  Button,\n  Icon,\n  Menu,\n  MenuItem,\n  Popover,\n  Tooltip,\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { useDrawing, useDrawingStore } from '../drawing-context';\nimport styles from './drawing-actions.css';\nimport { CurrentPeersMenu } from './remote-peer-menu';\nimport { displayFromPeerId, useRemotePeers } from './remote-peers';\nimport { domToPng } from 'modern-screenshot';\nimport { shareImage } from '../utils/share';\nimport { firstOf } from '../utils';\nimport { useConfigState } from '../config-state';\nimport { useErrorBoundary } from 'react-error-boundary';\n\nconst DEFAULT_FILENAME = 'card-draw.png';\n\nexport function DrawingActions() {\n  const getDrawing = useDrawing((s) => s.serializeSyncFields);\n  const updateDrawing = useDrawing((s) => s.updateDrawing);\n  const redrawAllCharts = useDrawing((s) => s.redrawAllCharts);\n  const hasPlayers = useDrawing((s) => !!s.players.length);\n  const syncPeer = useDrawing((s) => s.__syncPeer);\n  const isConnected = useRemotePeers((s) => !!s.thisPeer);\n  const remotePeers = useRemotePeers((s) => s.remotePeers);\n  const sendDrawing = useRemotePeers((s) => s.sendDrawing);\n  const syncDrawing = useRemotePeers((s) => s.beginSyncWithPeer);\n  const drawingStore = useDrawingStore();\n  const showLabels = useConfigState((s) => s.showPlayerAndRoundLabels);\n  const { showBoundary } = useErrorBoundary();\n\n  let remoteActions: JSX.Element | undefined = undefined;\n\n  const onlyRemote = firstOf(remotePeers.values());\n  if (remotePeers.size === 1 && onlyRemote) {\n    const peerId = displayFromPeerId(onlyRemote.peer);\n    remoteActions = (\n      <Menu>\n        <MenuItem\n          icon={IconNames.SendMessage}\n          text={`Send to ${peerId}`}\n          onClick={() => sendDrawing(getDrawing())}\n        />\n        <MenuItem\n          icon={IconNames.Changes}\n          text={`Start sync with ${peerId}`}\n          onClick={() => syncDrawing(drawingStore)}\n        />\n      </Menu>\n    );\n  } else if (remotePeers.size > 1) {\n    remoteActions = (\n      <Menu>\n        <MenuItem icon={IconNames.SendMessage} text=\"Send to...\">\n          <CurrentPeersMenu\n            disabled={syncPeer ? [syncPeer.peer] : false}\n            onClickPeer={(peerId) => sendDrawing(getDrawing(), peerId)}\n          />\n        </MenuItem>\n        <MenuItem icon={IconNames.Changes} text=\"Start sync with...\">\n          <CurrentPeersMenu\n            disabled={syncPeer ? [syncPeer.peer] : false}\n            onClickPeer={(peerId) => syncDrawing(drawingStore, peerId)}\n          />\n        </MenuItem>\n      </Menu>\n    );\n  }\n\n  const button = (\n    <Button\n      minimal\n      text={<Icon icon={IconNames.Share} />}\n      disabled={!remotePeers.size}\n    />\n  );\n\n  return (\n    <>\n      <div className={styles.networkButtons}>\n        {syncPeer && <Icon icon={IconNames.Changes} intent=\"success\" />}\n        {isConnected ? (\n          remotePeers.size ? (\n            <Popover content={remoteActions}>{button}</Popover>\n          ) : (\n            <Tooltip content=\"Connect to a peer to share\">{button}</Tooltip>\n          )\n        ) : null}\n        <Tooltip content=\"Save Image\">\n          <Button\n            minimal\n            icon={IconNames.Camera}\n            onClick={async () => {\n              const drawingId = getDrawing().id;\n              const drawingElement = document.querySelector(\n                '#drawing-' + drawingId,\n              );\n              if (drawingElement) {\n                shareImage(\n                  await domToPng(drawingElement, {\n                    scale: 2,\n                  }),\n                  DEFAULT_FILENAME,\n                );\n              }\n            }}\n          />\n        </Tooltip>\n        <Tooltip content=\"Redraw all charts\">\n          <Button\n            minimal\n            icon={IconNames.Refresh}\n            onClick={() =>\n              confirm(\n                'This will replace everything besides protects and pocket picks!',\n              ) && redrawAllCharts()\n            }\n          />\n        </Tooltip>\n        {process.env.NODE_ENV === 'production' ? null : (\n          <Tooltip content=\"Cause Error\">\n            <Button minimal icon={IconNames.Error} onClick={showBoundary} />\n          </Tooltip>\n        )}\n        {showLabels && (\n          <>\n            <Tooltip content=\"Add Player\">\n              <Button\n                minimal\n                icon={IconNames.NewPerson}\n                onClick={() => {\n                  updateDrawing((drawing) => {\n                    const next = drawing.players.slice();\n                    next.push('');\n                    return { players: next };\n                  });\n                }}\n              />\n            </Tooltip>\n            <Tooltip content=\"Remove Player\" disabled={!hasPlayers}>\n              <Button\n                minimal\n                icon={IconNames.BlockedPerson}\n                disabled={!hasPlayers}\n                onClick={() => {\n                  updateDrawing((drawing) => {\n                    const next = drawing.players.slice();\n                    next.pop();\n                    return { players: next };\n                  });\n                }}\n              />\n            </Tooltip>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"networkButtons\":\"networkButtons__bf3hc\"};","import { useEffect } from 'react';\nimport { useDrawing, useDrawingStore } from '../drawing-context';\nimport { syncStoreWithPeer } from '../zustand/shared-zustand';\nimport { useRemotePeers } from './remote-peers';\n\nexport function SyncWithPeers() {\n  const drawing = useDrawing();\n  const store = useDrawingStore();\n  const remotePeer = useRemotePeers((s) => {\n    if (drawing.__syncPeer) return s.remotePeers.get(drawing.__syncPeer.peer);\n  });\n\n  useEffect(() => {\n    if (!remotePeer && drawing.__syncPeer) {\n      drawing.updateDrawing({ __syncPeer: undefined });\n    }\n  }, [drawing, remotePeer]);\n\n  useEffect(() => {\n    if (drawing.__syncPeer) {\n      return syncStoreWithPeer(store, drawing.__syncPeer);\n    }\n  }, [drawing.__syncPeer, store]);\n\n  return null;\n}\n","import { memo, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { SongCard } from './song-card';\nimport styles from './drawn-set.css';\nimport { Drawing } from './models/Drawing';\nimport { SetLabels } from './tournament-mode/drawing-labels';\nimport { DrawingProvider, useDrawing } from './drawing-context';\nimport { DrawingActions } from './tournament-mode/drawing-actions';\nimport { SyncWithPeers } from './tournament-mode/sync-with-peers';\nimport { useConfigState } from './config-state';\nimport { ErrorFallback } from './utils/error-fallback';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nconst HUE_STEP = (255 / 8) * 3;\nlet hue = Math.floor(Math.random() * 255);\n\nfunction getRandomGradiant() {\n  hue += HUE_STEP;\n  return `linear-gradient(hsl(${hue}, var(--drawing-grad-saturation), var(--drawing-grad-lightness)), transparent, transparent)`;\n}\n\ninterface Props {\n  drawing: Drawing;\n}\n\nfunction ChartList() {\n  const charts = useDrawing((d) => d.charts);\n  return (\n    <AnimatePresence>\n      <motion.div\n        className={styles.chartList}\n        variants={{\n          hidden: {\n            opacity: 0,\n            scale: 0.8,\n            transition: {\n              type: 'spring',\n              bounce: 0.4,\n              staggerChildren: 0.02,\n              staggerDirection: -1,\n            },\n          },\n          show: {\n            opacity: 1,\n            scale: 1,\n            transition: {\n              type: 'spring',\n              bounce: 0.4,\n              staggerChildren: 0.3,\n            },\n          },\n        }}\n        initial=\"hidden\"\n        animate=\"show\"\n      >\n        {charts.map((c) => (\n          <ChartFromContext key={c.id} chartId={c.id} />\n        ))}\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n\nfunction ChartFromContext({ chartId }: { chartId: string }) {\n  const chart = useDrawing((d) => d.charts.find((c) => c.id === chartId));\n  const veto = useDrawing((d) => d.bans.find((b) => b.chartId === chartId));\n  const protect = useDrawing((d) =>\n    d.protects.find((b) => b.chartId === chartId),\n  );\n  const pocketPick = useDrawing((d) =>\n    d.pocketPicks.find((b) => b.chartId === chartId),\n  );\n  const winner = useDrawing((d) =>\n    d.winners.find((b) => b.chartId === chartId),\n  );\n  if (!chart) {\n    return null;\n  }\n  return (\n    <motion.div\n      layout\n      style={{ display: 'flex', flex: '1 0 0' }}\n      variants={{\n        hidden: {\n          opacity: 0,\n          scale: 0.8,\n          transition: {\n            type: 'spring',\n            bounce: 0.4,\n          },\n        },\n        show: {\n          opacity: 1,\n          scale: 1,\n          transition: {\n            type: 'spring',\n            bounce: 0.4,\n          },\n        },\n      }}\n    >\n      <SongCard\n        vetoedBy={veto?.player}\n        protectedBy={protect?.player}\n        replacedBy={pocketPick?.player}\n        replacedWith={pocketPick?.pick}\n        winner={winner?.player}\n        chart={chart}\n        actionsEnabled\n      />\n    </motion.div>\n  );\n}\n\nfunction TournamentModeSpacer() {\n  const showLabels = useConfigState((s) => s.showPlayerAndRoundLabels);\n  if (showLabels) {\n    return null;\n  }\n  return <div style={{ height: '15px' }} />;\n}\n\nconst DrawnSet = memo<Props>(function DrawnSet({ drawing }) {\n  const [backgroundImage] = useState(getRandomGradiant());\n\n  return (\n    <DrawingProvider initialDrawing={drawing}>\n      <ErrorBoundary\n        fallback={\n          <div\n            className={styles.drawing}\n            style={{\n              backgroundImage,\n              padding: '2em',\n              minHeight: '15em',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <ErrorFallback />\n          </div>\n        }\n      >\n        <SyncWithPeers />\n        <div\n          key={drawing.id}\n          style={{ backgroundImage }}\n          className={styles.drawing}\n        >\n          <TournamentModeSpacer />\n          <div id={`drawing-${drawing.id}`}>\n            <SetLabels />\n            <ChartList />\n          </div>\n          <DrawingActions />\n        </div>\n      </ErrorBoundary>\n    </DrawingProvider>\n  );\n});\n\nexport default DrawnSet;\n"],"names":["renderRoundLabel","roundLabel","_ref","handleClick","modifiers","query","handleFocus","matchesPredicate","icon","text","_jsx","MenuItem","active","disabled","style","opacity","undefined","onClick","onFocus","highlightText","roleStructure","filterRoundLabel","FuzzySearch","isMatch","lastIndex","words","split","filter","word","length","map","escapeRegExpChars","regexp","RegExp","join","tokens","match","exec","before","slice","push","children","rest","replace","identity","i","RoundSelect","t","useIntl","updateDrawing","useDrawing","d","tournamentTitle","title","roundLabels","useConfigState","c","tournamentRounds","AutoCompleteSelect","size","placeholder","itemList","value","onSelect","props","items","useMemo","list","noEmpty","unshift","Suggest","inputProps","boxShadow","textAlign","background","height","lineHeight","fontSize","className","Classes","resetOnSelect","resetOnClose","createNewItemPosition","createNewItemFromQuery","inputValueRenderer","createNewItemRenderer","round","itemPredicate","itemRenderer","noResults","onItemSelect","selectedItem","SetLabels","showLabels","s","showPlayerAndRoundLabels","players","_jsxs","styles","headers","p","idx","PlayerLabel","concat","playerIndex","Versus","ipp","incrementPriorityPlayer","priorityPlayer","versus","Icon","IconNames","CaretLeft","visibility","verticalAlign","CaretRight","playerNames","updateConfig","update","handleChange","useCallback","drawing","prev","includes","nextNames","ret","_Fragment","DrawingActions","getDrawing","serializeSyncFields","redrawAllCharts","hasPlayers","syncPeer","__syncPeer","isConnected","useRemotePeers","thisPeer","remotePeers","sendDrawing","syncDrawing","beginSyncWithPeer","drawingStore","useDrawingStore","showBoundary","useErrorBoundary","remoteActions","onlyRemote","firstOf","values","peerId","displayFromPeerId","peer","Menu","SendMessage","Changes","CurrentPeersMenu","onClickPeer","button","Button","minimal","Share","intent","Popover","content","Tooltip","Camera","async","drawingId","id","drawingElement","document","querySelector","shareImage","domToPng","scale","Refresh","confirm","NewPerson","next","BlockedPerson","pop","SyncWithPeers","store","remotePeer","get","useEffect","syncStoreWithPeer","hue","Math","floor","random","ChartList","charts","AnimatePresence","motion","div","variants","hidden","transition","type","bounce","staggerChildren","staggerDirection","show","initial","animate","ChartFromContext","chartId","chart","find","veto","bans","b","protect","protects","pocketPick","pocketPicks","winner","winners","layout","display","flex","SongCard","vetoedBy","player","protectedBy","replacedBy","replacedWith","pick","actionsEnabled","TournamentModeSpacer","memo","_ref2","backgroundImage","useState","DrawingProvider","initialDrawing","ErrorBoundary","fallback","padding","minHeight","justifyContent","ErrorFallback"],"sourceRoot":""}